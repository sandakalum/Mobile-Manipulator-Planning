#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/registration/icp.h>

//重心位置を求める
pcl::PointXYZ g_pos(pcl::PointCloud< pcl::PointXYZ >& cloud)
{
  pcl::PointXYZ g;

  for (int i = 0; i < cloud.size(); i++)
  {
    g.x += cloud.points[i].x;
    g.y += cloud.points[i].y;
    g.z += cloud.points[i].z;
  }

  g.x = g.x / cloud.size();
  g.y = g.y / cloud.size();
  g.z = g.z / cloud.size();

  return g;
}

int main()
{
  //宣言
  pcl::PointCloud< pcl::PointXYZ >::Ptr cloud(new pcl::PointCloud< pcl::PointXYZ >);

  // chair
  for (double z = -0.010; z < 0.780; z += 0.005)
  {
    for (double y = -0.020; y < 0.460; y += 0.005)
    {
      for (double x = -0.020; x < 0.430; x += 0.005)
      {
        int i = 0;
        if (z <= 0)
        {
          i = 1;
        }
        //前足
        if (((0.000 <= x) && (x <= 0.025)) || ((0.385 <= x) && (x <= 0.410)))
        {
          if (z <= 0.370)
          {
            if ((0.000 <= y) && (y <= 0.055))
            {
              i = 1;
            }
          }
        }

        //後足
        if (((0.015 <= x) && (x <= 0.040)) || ((0.370 <= x) && (x <= 0.395)))
        {
          if (z <= 0.250)
          {
            if (((0.385 + 0.0893 * (0.28 - z)) <= y) && (y <= (0.435 + 0.06 * (0.25 - z))))
            {
              i = 1;
            }
          }
          if ((0.250 < z) && (z <= 0.280))
          {
            if (((0.385 + 0.0893 * (0.28 - z)) <= y) && (y <= 0.435))
            {
              i = 1;
            }
          }
          if ((0.280 < z) && (z <= 0.370))
          {
            if ((0.385 <= y) && (y <= 0.435))
            {
              i = 1;
            }
          }
        }

        //足間の丸棒
        if ((((0.005 + 0.04545 * (y - 0.055)) <= x) && (x <= (0.020 + 0.04545 * (y - 0.055)))) ||
            (((0.390 - 0.04545 * (y - 0.055)) <= x) && (x <= (0.405 - 0.04545 * (y - 0.055)))))
        {
          if ((0.134 <= z) && (z <= 0.150))
          {
            if ((0.050 <= y) && (y <= 0.400))
            {
              i = 1;
            }
          }
        }

        //座面下の横枠
        if ((((0.000 + 0.04545 * (y - 0.055)) <= x) && (x <= (0.025 + 0.04545 * (y - 0.055)))) ||
            (((0.385 - 0.04545 * (y - 0.055)) <= x) && (x <= (0.410 - 0.04545 * (y - 0.055)))))
        {
          if ((0.305 <= z) && (z <= 0.370))
          {
            if ((0.055 <= y) && (y <= 0.385))
            {
              i = 1;
            }
          }
        }

        //座面下の前枠
        if ((0.025 <= x) && (x <= 0.385))
        {
          if ((0.310 <= z) && (z <= 0.370))
          {
            if ((0.000 <= y) && (y <= 0.020))
            {
              i = 1;
            }
          }
        }

        //座面の後枠
        if ((0.025 <= x) && (x <= 0.385))
        {
          if ((0.320 <= z) && (z <= 0.390))
          {
            if ((0.390 <= y) && (y <= 0.410))
            {
              i = 1;
            }
          }
        }

        //座面
        double dis = 1000.0;
        if (((-0.020 + 0.075 * (y + 0.010)) <= x) && (x <= (0.430 - 0.075 * (y + 0.010))))
        {
          if ((x - (-0.020 + 0.075 * (y + 0.010))) < dis)
            dis = x - (-0.020 + 0.075 * (y + 0.010));
          if (((0.430 - 0.075 * (y + 0.010)) - x) < dis)
            dis = (0.430 - 0.075 * (y + 0.010)) - x;
          if ((y + 0.010) < dis)
            dis = (y + 0.010);
          if ((0.380 - y) < dis)
            dis = (0.380 - y);
          if (dis <= 0.030)
          {
            if (/*(0.370 <= z)*/ (0.385 + dis <= z) && (z <= 0.390 + dis))
            {
              if ((-0.010 <= y) && (y <= 0.380))
              {
                i = 1;
              }
            }
          }
          else
          {
            if (/*(0.370 <= z)*/ (0.425 <= z) && (z <= 0.430))
            {
              if ((-0.010 <= y) && (y <= 0.380))
              {
                i = 1;
              }
            }
          }
        }

        if (x <= 0.060)
        {
          if ((0.370 <= z) && (z <= 0.390))
          {
            if (((-0.030 - 0.25 * (x - 0.060)) <= y) && (y < -0.010))
            {
              i = 1;
            }
          }
        }

        if ((0.060 < x) && (x < 0.350))
        {
          if ((0.370 <= z) && (z <= 0.390))
          {
            if ((-0.020 <= y) && (y < -0.010))
            {
              i = 1;
            }
          }
        }

        if (0.350 <= x)
        {
          if ((0.370 <= z) && (z <= 0.390))
          {
            if (((-0.030 + 0.25 * (x - 0.350)) <= y) && (y < -0.010))
            {
              i = 1;
            }
          }
        }

        //背もたれ横
        if (((0.015 <= x) && (x <= 0.040)) || ((0.370 <= x) && (x <= 0.395)))
        {
          if ((0.370 < z) && (z <= 0.415))
          {
            if ((0.385 <= y) && (y <= 0.435))
            {
              i = 1;
            }
          }
          if ((0.415 < z) && (z <= 0.450))
          {
            if (((0.385 + 0.116 * (z - 0.395)) <= y) && (y <= 0.435))
            {
              i = 1;
            }
          }
          if (0.450 < z)
          {
            if (((0.385 + 0.116 * (z - 0.395)) <= y) && (y <= (0.435 + 0.0806 * (z - 0.450))))
            {
              i = 1;
            }
          }
        }

        //背もたれ下
        if ((0.040 <= x) && (x <= 0.370))
        {
          if (((0.570 + 0.0909 * (fabs(0.205 - x))) <= z) && (z <= (0.610 + 0.0909 * (fabs(0.205 - x)))))
          {
            if (((0.415 - 0.0909 * (fabs(0.205 - x))) <= y) && (y <= (0.435 - 0.0909 * (fabs(0.205 - x)))))
            {
              i = 1;
            }
          }
        }

        //背もたれ上
        if ((0.040 <= x) && (x <= 0.370))
        {
          if (((0.680 + 0.0909 * (fabs(0.205 - x))) <= z) && (z <= 0.770))
          {
            if (((0.42 - 0.0909 * (fabs(0.205 - x)) + 0.166667 * (z - 0.660)) <= y) &&
                (y <= (0.44 - 0.0909 * (fabs(0.205 - x)) + 0.166667 * (z - 0.660))))
            {
              i = 1;
            }
          }
        }

        if (i == 1)
        {
          pcl::PointXYZ tmp;
          tmp.x = x;
          tmp.y = y;
          tmp.z = z;
          cloud->push_back(tmp);
        }
      }
    }
  }

  Eigen::Matrix4f r(Eigen::Matrix4f::Identity());

  r(0, 0) = 1;
  r(0, 1) = 0;
  r(0, 2) = 0;
  r(0, 3) = -0.205;
  r(1, 0) = 0;
  r(1, 1) = 1;
  r(1, 2) = 0;
  r(1, 3) = -0.215;
  r(2, 0) = 0;
  r(2, 1) = 0;
  r(2, 2) = 1;
  r(2, 3) = 0;
  r(3, 0) = 0;
  r(3, 1) = 0;
  r(3, 2) = 0;
  r(3, 3) = 1;
  pcl::transformPointCloud(*cloud, *cloud, r);

  pcl::io::savePCDFile("catkin_ws/src/ros_tms/tms_ss/tms_ss_ods/ods_make_model/data/chair/model_chair.pcd", *cloud,
                       false);

  pcl::visualization::CloudViewer viewer("Cloud Viewer");
  while (!viewer.wasStopped())
  {
    viewer.showCloud(cloud);
  }
  return 0;
}
