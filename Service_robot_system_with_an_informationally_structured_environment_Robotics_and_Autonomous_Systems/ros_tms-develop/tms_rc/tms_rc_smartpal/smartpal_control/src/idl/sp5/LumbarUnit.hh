// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __LumbarUnit_hh__
#define __LumbarUnit_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
#endif



#ifndef __Common_hh_EXTERNAL_GUARD__
#define __Common_hh_EXTERNAL_GUARD__
#include <Common.hh>
#endif
#ifndef __LumbarExtAxes_hh_EXTERNAL_GUARD__
#define __LumbarExtAxes_hh_EXTERNAL_GUARD__
#include <LumbarExtAxes.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __LumbarUnit__
#define __LumbarUnit__

class LumbarUnit;
class _objref_LumbarUnit;
class _impl_LumbarUnit;

typedef _objref_LumbarUnit* LumbarUnit_ptr;
typedef LumbarUnit_ptr LumbarUnitRef;

class LumbarUnit_Helper {
public:
  typedef LumbarUnit_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_LumbarUnit, LumbarUnit_Helper> LumbarUnit_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_LumbarUnit,LumbarUnit_Helper > LumbarUnit_out;

#endif

// interface LumbarUnit
class LumbarUnit {
public:
  // Declarations for this interface type.
  typedef LumbarUnit_ptr _ptr_type;
  typedef LumbarUnit_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_LumbarUnit :
  public virtual _objref_LumbaExtAxes
{
public:
  ::CORBA::Boolean move(::CORBA::Double lowerAxis, ::CORBA::Double upperAxis, ::CORBA::Double velocity, ::CORBA::Double accel);
  ::CORBA::Boolean moveUpperAxis(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel);
  ::CORBA::Boolean moveLowerAxis(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel);
  ::CORBA::Boolean getFeedback(::CORBA::Double& lowerAxis, ::CORBA::Double& upperAxis);
  ::CORBA::Boolean getCommand(::CORBA::Double& lowerAxis, ::CORBA::Double& upperAxis);
  ::CORBA::Boolean moveCooperative(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel);

  inline _objref_LumbarUnit()  { _PR_setobj(0); }  // nil
  _objref_LumbarUnit(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_LumbarUnit();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_LumbarUnit(const _objref_LumbarUnit&);
  _objref_LumbarUnit& operator = (const _objref_LumbarUnit&);
  // not implemented

  friend class LumbarUnit;
};

class _pof_LumbarUnit : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_LumbarUnit() : _OMNI_NS(proxyObjectFactory)(LumbarUnit::_PD_repoId) {}
  virtual ~_pof_LumbarUnit();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_LumbarUnit :
  public virtual _impl_LumbaExtAxes
{
public:
  virtual ~_impl_LumbarUnit();

  virtual ::CORBA::Boolean move(::CORBA::Double lowerAxis, ::CORBA::Double upperAxis, ::CORBA::Double velocity, ::CORBA::Double accel) = 0;
  virtual ::CORBA::Boolean moveUpperAxis(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel) = 0;
  virtual ::CORBA::Boolean moveLowerAxis(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel) = 0;
  virtual ::CORBA::Boolean getFeedback(::CORBA::Double& lowerAxis, ::CORBA::Double& upperAxis) = 0;
  virtual ::CORBA::Boolean getCommand(::CORBA::Double& lowerAxis, ::CORBA::Double& upperAxis) = 0;
  virtual ::CORBA::Boolean moveCooperative(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_LumbarUnit :
  public virtual _impl_LumbarUnit,
  public virtual POA_LumbaExtAxes
{
public:
  virtual ~POA_LumbarUnit();

  inline ::LumbarUnit_ptr _this() {
    return (::LumbarUnit_ptr) _do_this(::LumbarUnit::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr



inline void
LumbarUnit::_marshalObjRef(::LumbarUnit_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_LumbarUnit
#endif

#endif  // __LumbarUnit_hh__

