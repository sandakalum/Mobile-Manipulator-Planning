// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ArmUnit_hh__
#define __ArmUnit_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ArmUnit
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ArmUnit
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ArmUnit
#endif



#ifndef __Common_hh_EXTERNAL_GUARD__
#define __Common_hh_EXTERNAL_GUARD__
#include <Common.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





enum FrameID { JOINT, CARTESIAN /*, __max_FrameID=0xffffffff */ };
typedef FrameID& FrameID_out;

struct Acceleration {
  typedef _CORBA_ConstrType_Fix_Var<Acceleration> _var_type;

  
  ::CORBA::ULong translation;

  ::CORBA::ULong rotation;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef Acceleration::_var_type Acceleration_var;

typedef Acceleration& Acceleration_out;

struct CartesianPos {
  typedef _CORBA_ConstrType_Fix_Var<CartesianPos> _var_type;

  
  ::CORBA::Double px;

  ::CORBA::Double py;

  ::CORBA::Double pz;

  ::CORBA::Double rx;

  ::CORBA::Double ry;

  ::CORBA::Double rz;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef CartesianPos::_var_type CartesianPos_var;

typedef CartesianPos& CartesianPos_out;

struct CartesianVel {
  typedef _CORBA_ConstrType_Fix_Var<CartesianVel> _var_type;

  
  ::CORBA::Double x;

  ::CORBA::Double y;

  ::CORBA::Double z;

  ::CORBA::Double rx;

  ::CORBA::Double ry;

  ::CORBA::Double rz;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef CartesianVel::_var_type CartesianVel_var;

typedef CartesianVel& CartesianVel_out;

enum CommandFrameType { ORIGINAL, TOOL /*, __max_CommandFrameType=0xffffffff */ };
typedef CommandFrameType& CommandFrameType_out;

struct LimitValue {
  typedef _CORBA_ConstrType_Fix_Var<LimitValue> _var_type;

  
  ::CORBA::Double upper;

  ::CORBA::Double lower;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef LimitValue::_var_type LimitValue_var;

typedef LimitValue& LimitValue_out;

class ArmLimitSeq_var;

class ArmLimitSeq : public _CORBA_Unbounded_Sequence< LimitValue >  {
public:
  typedef ArmLimitSeq_var _var_type;
  inline ArmLimitSeq() {}
  inline ArmLimitSeq(const ArmLimitSeq& _s)
    : _CORBA_Unbounded_Sequence< LimitValue > (_s) {}

  inline ArmLimitSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< LimitValue > (_max) {}
  inline ArmLimitSeq(_CORBA_ULong _max, _CORBA_ULong _len, LimitValue* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< LimitValue > (_max, _len, _val, _rel) {}



  inline ArmLimitSeq& operator = (const ArmLimitSeq& _s) {
    _CORBA_Unbounded_Sequence< LimitValue > ::operator=(_s);
    return *this;
  }
};

class ArmLimitSeq_out;

class ArmLimitSeq_var {
public:
  inline ArmLimitSeq_var() : _pd_seq(0) {}
  inline ArmLimitSeq_var(ArmLimitSeq* _s) : _pd_seq(_s) {}
  inline ArmLimitSeq_var(const ArmLimitSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new ArmLimitSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~ArmLimitSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline ArmLimitSeq_var& operator = (ArmLimitSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline ArmLimitSeq_var& operator = (const ArmLimitSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new ArmLimitSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline LimitValue& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline ArmLimitSeq* operator -> () { return _pd_seq; }
  inline const ArmLimitSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator ArmLimitSeq& () const { return *_pd_seq; }
#else
  inline operator const ArmLimitSeq& () const { return *_pd_seq; }
  inline operator ArmLimitSeq& () { return *_pd_seq; }
#endif
    
  inline const ArmLimitSeq& in() const { return *_pd_seq; }
  inline ArmLimitSeq&       inout()    { return *_pd_seq; }
  inline ArmLimitSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline ArmLimitSeq* _retn() { ArmLimitSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class ArmLimitSeq_out;
  
private:
  ArmLimitSeq* _pd_seq;
};

class ArmLimitSeq_out {
public:
  inline ArmLimitSeq_out(ArmLimitSeq*& _s) : _data(_s) { _data = 0; }
  inline ArmLimitSeq_out(ArmLimitSeq_var& _s)
    : _data(_s._pd_seq) { _s = (ArmLimitSeq*) 0; }
  inline ArmLimitSeq_out(const ArmLimitSeq_out& _s) : _data(_s._data) {}
  inline ArmLimitSeq_out& operator = (const ArmLimitSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline ArmLimitSeq_out& operator = (ArmLimitSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator ArmLimitSeq*&()  { return _data; }
  inline ArmLimitSeq*& ptr()       { return _data; }
  inline ArmLimitSeq* operator->() { return _data; }

  inline LimitValue& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  ArmLimitSeq*& _data;

private:
  ArmLimitSeq_out();
  ArmLimitSeq_out& operator=(const ArmLimitSeq_var&);
};

struct Velocity {
  typedef _CORBA_ConstrType_Fix_Var<Velocity> _var_type;

  
  ::CORBA::Double translation;

  ::CORBA::Double rotation;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef Velocity::_var_type Velocity_var;

typedef Velocity& Velocity_out;

#ifndef __ArmUnit__
#define __ArmUnit__

class ArmUnit;
class _objref_ArmUnit;
class _impl_ArmUnit;

typedef _objref_ArmUnit* ArmUnit_ptr;
typedef ArmUnit_ptr ArmUnitRef;

class ArmUnit_Helper {
public:
  typedef ArmUnit_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_ArmUnit, ArmUnit_Helper> ArmUnit_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_ArmUnit,ArmUnit_Helper > ArmUnit_out;

#endif

// interface ArmUnit
class ArmUnit {
public:
  // Declarations for this interface type.
  typedef ArmUnit_ptr _ptr_type;
  typedef ArmUnit_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_ArmUnit :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  ::CORBA::Long abort();
  ::CORBA::Long clearAlarms();
  ::CORBA::Long getActiveAlarm(::CORBA::ULong numOfRequestAlm, ::CORBA::ULong& numOfResponseAlm, ::AlarmSeq_out alarms);
  ::CORBA::Long getCommandPos(::FrameID id, ::DoubleSeq_out position);
  ::CORBA::Long getFeedbackPos(::FrameID id, ::DoubleSeq_out position);
  ::CORBA::Long getJointAcceleration(::CORBA::ULong& accel);
  ::CORBA::Long getJointSoftLimit(::ArmLimitSeq_out softLimit);
  ::CORBA::Long getLinearAcceleration(::Acceleration& accel);
  ::CORBA::Long getMaxJointVelocity(::DoubleSeq_out velocity);
  ::CORBA::Long getMaxJointAcceleration(::DoubleSeq_out accel);
  ::CORBA::Long getMotionRate(::CORBA::ULong& rate);
  ::CORBA::Long getState(::CORBA::ULong& statusId, ::CORBA::String_out message);
  ::CORBA::Long getVersion(::CORBA::String_out versionMessage);
  ::CORBA::Boolean isMoving();
  ::CORBA::Boolean isPowerOn();
  ::CORBA::Boolean isServoOn();
  ::CORBA::Long moveJogJoint(const ::DoubleSeq& velocity);
  ::CORBA::Long moveJogLinear(::CommandFrameType cpType, const ::CartesianVel& vel, ::CORBA::Double redundancyVel);
  ::CORBA::Long moveJointAbs(const ::DoubleSeq& position, ::CORBA::Double velocity);
  ::CORBA::Long moveJointRel(const ::DoubleSeq& position, ::CORBA::Double velocity);
  ::CORBA::Long moveLinearAbs(::CommandFrameType cpType, const ::CartesianPos& absPos, ::CORBA::Double redundancyPos, const ::Velocity& vel);
  ::CORBA::Long moveLinearRel(::CommandFrameType cpType, const ::CartesianPos& relPos, ::CORBA::Double redundancyPos, const ::Velocity& vel);
  ::CORBA::Long pause();
  ::CORBA::Long powerOff();
  ::CORBA::Long powerOn();
  ::CORBA::Long resume();
  ::CORBA::Long servoOff();
  ::CORBA::Long servoOn();
  ::CORBA::Long setControlPointOffset(const ::CartesianPos& offset);
  ::CORBA::Long setJogTimeout(::CORBA::ULong time);
  ::CORBA::Long setJointAcceleration(::CORBA::ULong accel);
  ::CORBA::Long setLinearAcceleration(const ::Acceleration& accel);
  ::CORBA::Long stop();

  inline _objref_ArmUnit()  { _PR_setobj(0); }  // nil
  _objref_ArmUnit(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_ArmUnit();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_ArmUnit(const _objref_ArmUnit&);
  _objref_ArmUnit& operator = (const _objref_ArmUnit&);
  // not implemented

  friend class ArmUnit;
};

class _pof_ArmUnit : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_ArmUnit() : _OMNI_NS(proxyObjectFactory)(ArmUnit::_PD_repoId) {}
  virtual ~_pof_ArmUnit();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_ArmUnit :
  public virtual omniServant
{
public:
  virtual ~_impl_ArmUnit();

  virtual ::CORBA::Long abort() = 0;
  virtual ::CORBA::Long clearAlarms() = 0;
  virtual ::CORBA::Long getActiveAlarm(::CORBA::ULong numOfRequestAlm, ::CORBA::ULong& numOfResponseAlm, ::AlarmSeq_out alarms) = 0;
  virtual ::CORBA::Long getCommandPos(::FrameID id, ::DoubleSeq_out position) = 0;
  virtual ::CORBA::Long getFeedbackPos(::FrameID id, ::DoubleSeq_out position) = 0;
  virtual ::CORBA::Long getJointAcceleration(::CORBA::ULong& accel) = 0;
  virtual ::CORBA::Long getJointSoftLimit(::ArmLimitSeq_out softLimit) = 0;
  virtual ::CORBA::Long getLinearAcceleration(::Acceleration& accel) = 0;
  virtual ::CORBA::Long getMaxJointVelocity(::DoubleSeq_out velocity) = 0;
  virtual ::CORBA::Long getMaxJointAcceleration(::DoubleSeq_out accel) = 0;
  virtual ::CORBA::Long getMotionRate(::CORBA::ULong& rate) = 0;
  virtual ::CORBA::Long getState(::CORBA::ULong& statusId, ::CORBA::String_out message) = 0;
  virtual ::CORBA::Long getVersion(::CORBA::String_out versionMessage) = 0;
  virtual ::CORBA::Boolean isMoving() = 0;
  virtual ::CORBA::Boolean isPowerOn() = 0;
  virtual ::CORBA::Boolean isServoOn() = 0;
  virtual ::CORBA::Long moveJogJoint(const ::DoubleSeq& velocity) = 0;
  virtual ::CORBA::Long moveJogLinear(::CommandFrameType cpType, const ::CartesianVel& vel, ::CORBA::Double redundancyVel) = 0;
  virtual ::CORBA::Long moveJointAbs(const ::DoubleSeq& position, ::CORBA::Double velocity) = 0;
  virtual ::CORBA::Long moveJointRel(const ::DoubleSeq& position, ::CORBA::Double velocity) = 0;
  virtual ::CORBA::Long moveLinearAbs(::CommandFrameType cpType, const ::CartesianPos& absPos, ::CORBA::Double redundancyPos, const ::Velocity& vel) = 0;
  virtual ::CORBA::Long moveLinearRel(::CommandFrameType cpType, const ::CartesianPos& relPos, ::CORBA::Double redundancyPos, const ::Velocity& vel) = 0;
  virtual ::CORBA::Long pause() = 0;
  virtual ::CORBA::Long powerOff() = 0;
  virtual ::CORBA::Long powerOn() = 0;
  virtual ::CORBA::Long resume() = 0;
  virtual ::CORBA::Long servoOff() = 0;
  virtual ::CORBA::Long servoOn() = 0;
  virtual ::CORBA::Long setControlPointOffset(const ::CartesianPos& offset) = 0;
  virtual ::CORBA::Long setJogTimeout(::CORBA::ULong time) = 0;
  virtual ::CORBA::Long setJointAcceleration(::CORBA::ULong accel) = 0;
  virtual ::CORBA::Long setLinearAcceleration(const ::Acceleration& accel) = 0;
  virtual ::CORBA::Long stop() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_ArmUnit :
  public virtual _impl_ArmUnit,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_ArmUnit();

  inline ::ArmUnit_ptr _this() {
    return (::ArmUnit_ptr) _do_this(::ArmUnit::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr

inline void operator >>=(FrameID _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (FrameID& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= CARTESIAN) {
    _e = (FrameID) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(CommandFrameType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (CommandFrameType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= TOOL) {
    _e = (CommandFrameType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
ArmUnit::_marshalObjRef(::ArmUnit_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ArmUnit
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ArmUnit
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ArmUnit
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ArmUnit
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ArmUnit
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ArmUnit
#endif

#endif  // __ArmUnit_hh__

