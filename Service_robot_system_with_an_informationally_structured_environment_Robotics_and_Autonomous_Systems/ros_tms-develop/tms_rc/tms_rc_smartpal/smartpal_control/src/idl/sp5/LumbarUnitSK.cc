// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "LumbarUnit.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



LumbarUnit_ptr LumbarUnit_Helper::_nil() {
  return ::LumbarUnit::_nil();
}

::CORBA::Boolean LumbarUnit_Helper::is_nil(::LumbarUnit_ptr p) {
  return ::CORBA::is_nil(p);

}

void LumbarUnit_Helper::release(::LumbarUnit_ptr p) {
  ::CORBA::release(p);
}

void LumbarUnit_Helper::marshalObjRef(::LumbarUnit_ptr obj, cdrStream& s) {
  ::LumbarUnit::_marshalObjRef(obj, s);
}

LumbarUnit_ptr LumbarUnit_Helper::unmarshalObjRef(cdrStream& s) {
  return ::LumbarUnit::_unmarshalObjRef(s);
}

void LumbarUnit_Helper::duplicate(::LumbarUnit_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

LumbarUnit_ptr
LumbarUnit::_duplicate(::LumbarUnit_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

LumbarUnit_ptr
LumbarUnit::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


LumbarUnit_ptr
LumbarUnit::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

LumbarUnit_ptr
LumbarUnit::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_LumbarUnit _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_LumbarUnit* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_LumbarUnit;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* LumbarUnit::_PD_repoId = "IDL:LumbarUnit:1.0";


_objref_LumbarUnit::~_objref_LumbarUnit() {
  
}


_objref_LumbarUnit::_objref_LumbarUnit(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::LumbarUnit::_PD_repoId, ior, id, 1),
   _objref_LumbaExtAxes(ior, id)
   
{
  _PR_setobj(this);
}

void*
_objref_LumbarUnit::_ptrToObjRef(const char* id)
{
  if( id == ::LumbarUnit::_PD_repoId )
    return (::LumbarUnit_ptr) this;
  if( id == ::LumbaExtAxes::_PD_repoId )
    return (::LumbaExtAxes_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::LumbarUnit::_PD_repoId) )
    return (::LumbarUnit_ptr) this;
  if( omni::strMatch(id, ::LumbaExtAxes::_PD_repoId) )
    return (::LumbaExtAxes_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cdouble_i_cdouble_i_cdouble_i_cdouble
class _0RL_cd_92b43deefc7c793b_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_92b43deefc7c793b_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Double arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_92b43deefc7c793b_00000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_92b43deefc7c793b_00000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;
  (::CORBA::Double&)arg_3 <<= _n;

}

void _0RL_cd_92b43deefc7c793b_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_92b43deefc7c793b_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_92b43deefc7c793b_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_92b43deefc7c793b_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_92b43deefc7c793b_00000000* tcd = (_0RL_cd_92b43deefc7c793b_00000000*)cd;
  _impl_LumbarUnit* impl = (_impl_LumbarUnit*) svnt->_ptrToInterface(LumbarUnit::_PD_repoId);
  tcd->result = impl->move(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

::CORBA::Boolean _objref_LumbarUnit::move(::CORBA::Double lowerAxis, ::CORBA::Double upperAxis, ::CORBA::Double velocity, ::CORBA::Double accel)
{
  _0RL_cd_92b43deefc7c793b_00000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_10000000, "move", 5);
  _call_desc.arg_0 = lowerAxis;
  _call_desc.arg_1 = upperAxis;
  _call_desc.arg_2 = velocity;
  _call_desc.arg_3 = accel;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cdouble_i_cdouble_i_cdouble
class _0RL_cd_92b43deefc7c793b_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_92b43deefc7c793b_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_92b43deefc7c793b_20000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_92b43deefc7c793b_20000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;

}

void _0RL_cd_92b43deefc7c793b_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_92b43deefc7c793b_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_92b43deefc7c793b_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_92b43deefc7c793b_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_92b43deefc7c793b_20000000* tcd = (_0RL_cd_92b43deefc7c793b_20000000*)cd;
  _impl_LumbarUnit* impl = (_impl_LumbarUnit*) svnt->_ptrToInterface(LumbarUnit::_PD_repoId);
  tcd->result = impl->moveUpperAxis(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean _objref_LumbarUnit::moveUpperAxis(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel)
{
  _0RL_cd_92b43deefc7c793b_20000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_30000000, "moveUpperAxis", 14);
  _call_desc.arg_0 = position;
  _call_desc.arg_1 = velocity;
  _call_desc.arg_2 = accel;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_92b43deefc7c793b_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_92b43deefc7c793b_20000000* tcd = (_0RL_cd_92b43deefc7c793b_20000000*)cd;
  _impl_LumbarUnit* impl = (_impl_LumbarUnit*) svnt->_ptrToInterface(LumbarUnit::_PD_repoId);
  tcd->result = impl->moveLowerAxis(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean _objref_LumbarUnit::moveLowerAxis(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel)
{
  _0RL_cd_92b43deefc7c793b_20000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_40000000, "moveLowerAxis", 14);
  _call_desc.arg_0 = position;
  _call_desc.arg_1 = velocity;
  _call_desc.arg_2 = accel;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_o_cdouble_o_cdouble
class _0RL_cd_92b43deefc7c793b_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_92b43deefc7c793b_50000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_92b43deefc7c793b_50000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_92b43deefc7c793b_50000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;

}

const char* const _0RL_cd_92b43deefc7c793b_50000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_92b43deefc7c793b_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_92b43deefc7c793b_50000000* tcd = (_0RL_cd_92b43deefc7c793b_50000000*)cd;
  _impl_LumbarUnit* impl = (_impl_LumbarUnit*) svnt->_ptrToInterface(LumbarUnit::_PD_repoId);
  tcd->result = impl->getFeedback(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean _objref_LumbarUnit::getFeedback(::CORBA::Double& lowerAxis, ::CORBA::Double& upperAxis)
{
  _0RL_cd_92b43deefc7c793b_50000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_60000000, "getFeedback", 12);


  _invoke(_call_desc);
  lowerAxis = _call_desc.arg_0;
  upperAxis = _call_desc.arg_1;
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_92b43deefc7c793b_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_92b43deefc7c793b_50000000* tcd = (_0RL_cd_92b43deefc7c793b_50000000*)cd;
  _impl_LumbarUnit* impl = (_impl_LumbarUnit*) svnt->_ptrToInterface(LumbarUnit::_PD_repoId);
  tcd->result = impl->getCommand(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean _objref_LumbarUnit::getCommand(::CORBA::Double& lowerAxis, ::CORBA::Double& upperAxis)
{
  _0RL_cd_92b43deefc7c793b_50000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_70000000, "getCommand", 11);


  _invoke(_call_desc);
  lowerAxis = _call_desc.arg_0;
  upperAxis = _call_desc.arg_1;
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_92b43deefc7c793b_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_92b43deefc7c793b_20000000* tcd = (_0RL_cd_92b43deefc7c793b_20000000*)cd;
  _impl_LumbarUnit* impl = (_impl_LumbarUnit*) svnt->_ptrToInterface(LumbarUnit::_PD_repoId);
  tcd->result = impl->moveCooperative(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

::CORBA::Boolean _objref_LumbarUnit::moveCooperative(::CORBA::Double position, ::CORBA::Double velocity, ::CORBA::Double accel)
{
  _0RL_cd_92b43deefc7c793b_20000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_80000000, "moveCooperative", 16);
  _call_desc.arg_0 = position;
  _call_desc.arg_1 = velocity;
  _call_desc.arg_2 = accel;

  _invoke(_call_desc);
  return _call_desc.result;


}
_pof_LumbarUnit::~_pof_LumbarUnit() {}


omniObjRef*
_pof_LumbarUnit::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_LumbarUnit(ior, id);
}


::CORBA::Boolean
_pof_LumbarUnit::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::LumbarUnit::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, LumbaExtAxes::_PD_repoId) )
    return 1;


  return 0;
}

const _pof_LumbarUnit _the_pof_LumbarUnit;

_impl_LumbarUnit::~_impl_LumbarUnit() {}


::CORBA::Boolean
_impl_LumbarUnit::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "move") ) {

    _0RL_cd_92b43deefc7c793b_00000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_10000000, "move", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveUpperAxis") ) {

    _0RL_cd_92b43deefc7c793b_20000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_30000000, "moveUpperAxis", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveLowerAxis") ) {

    _0RL_cd_92b43deefc7c793b_20000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_40000000, "moveLowerAxis", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFeedback") ) {

    _0RL_cd_92b43deefc7c793b_50000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_60000000, "getFeedback", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCommand") ) {

    _0RL_cd_92b43deefc7c793b_50000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_70000000, "getCommand", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveCooperative") ) {

    _0RL_cd_92b43deefc7c793b_20000000 _call_desc(_0RL_lcfn_92b43deefc7c793b_80000000, "moveCooperative", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_LumbaExtAxes::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LumbaExtAxes*)this)->
      _impl_LumbaExtAxes::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
_impl_LumbarUnit::_ptrToInterface(const char* id)
{
  if( id == ::LumbarUnit::_PD_repoId )
    return (::_impl_LumbarUnit*) this;
  if( id == ::LumbaExtAxes::_PD_repoId )
    return (::_impl_LumbaExtAxes*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::LumbarUnit::_PD_repoId) )
    return (::_impl_LumbarUnit*) this;
  if( omni::strMatch(id, ::LumbaExtAxes::_PD_repoId) )
    return (::_impl_LumbaExtAxes*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
_impl_LumbarUnit::_mostDerivedRepoId()
{
  return ::LumbarUnit::_PD_repoId;
}

POA_LumbarUnit::~POA_LumbarUnit() {}

