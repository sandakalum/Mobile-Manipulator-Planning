// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Common_hh__
#define __Common_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Common
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Common
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Common
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





enum AlarmType { FAULT, WARNING, UNKNOWN /*, __max_AlarmType=0xffffffff */ };
typedef AlarmType& AlarmType_out;

struct Alarm {
  typedef _CORBA_ConstrType_Variable_Var<Alarm> _var_type;

  
  ::CORBA::ULong code;

  AlarmType type;

  ::CORBA::String_member description;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef Alarm::_var_type Alarm_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< Alarm,Alarm_var > Alarm_out;

struct AxisLimit {
  typedef _CORBA_ConstrType_Fix_Var<AxisLimit> _var_type;

  
  ::CORBA::ULong id;

  ::CORBA::Double upper;

  ::CORBA::Double lower;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef AxisLimit::_var_type AxisLimit_var;

typedef AxisLimit& AxisLimit_out;

class ShortSeq_var;

class ShortSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 >  {
public:
  typedef ShortSeq_var _var_type;
  inline ShortSeq() {}
  inline ShortSeq(const ShortSeq& _s)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > (_s) {}

  inline ShortSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > (_max) {}
  inline ShortSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Short* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > (_max, _len, _val, _rel) {}



  inline ShortSeq& operator = (const ShortSeq& _s) {
    _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > ::operator=(_s);
    return *this;
  }
};

class ShortSeq_out;

class ShortSeq_var {
public:
  inline ShortSeq_var() : _pd_seq(0) {}
  inline ShortSeq_var(ShortSeq* _s) : _pd_seq(_s) {}
  inline ShortSeq_var(const ShortSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new ShortSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~ShortSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline ShortSeq_var& operator = (ShortSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline ShortSeq_var& operator = (const ShortSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new ShortSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline ::CORBA::Short& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline ShortSeq* operator -> () { return _pd_seq; }
  inline const ShortSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator ShortSeq& () const { return *_pd_seq; }
#else
  inline operator const ShortSeq& () const { return *_pd_seq; }
  inline operator ShortSeq& () { return *_pd_seq; }
#endif
    
  inline const ShortSeq& in() const { return *_pd_seq; }
  inline ShortSeq&       inout()    { return *_pd_seq; }
  inline ShortSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline ShortSeq* _retn() { ShortSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class ShortSeq_out;
  
private:
  ShortSeq* _pd_seq;
};

class ShortSeq_out {
public:
  inline ShortSeq_out(ShortSeq*& _s) : _data(_s) { _data = 0; }
  inline ShortSeq_out(ShortSeq_var& _s)
    : _data(_s._pd_seq) { _s = (ShortSeq*) 0; }
  inline ShortSeq_out(const ShortSeq_out& _s) : _data(_s._data) {}
  inline ShortSeq_out& operator = (const ShortSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline ShortSeq_out& operator = (ShortSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator ShortSeq*&()  { return _data; }
  inline ShortSeq*& ptr()       { return _data; }
  inline ShortSeq* operator->() { return _data; }

  inline ::CORBA::Short& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  ShortSeq*& _data;

private:
  ShortSeq_out();
  ShortSeq_out& operator=(const ShortSeq_var&);
};

class LongSeq_var;

class LongSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 >  {
public:
  typedef LongSeq_var _var_type;
  inline LongSeq() {}
  inline LongSeq(const LongSeq& _s)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_s) {}

  inline LongSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max) {}
  inline LongSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Long* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > (_max, _len, _val, _rel) {}



  inline LongSeq& operator = (const LongSeq& _s) {
    _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > ::operator=(_s);
    return *this;
  }
};

class LongSeq_out;

class LongSeq_var {
public:
  inline LongSeq_var() : _pd_seq(0) {}
  inline LongSeq_var(LongSeq* _s) : _pd_seq(_s) {}
  inline LongSeq_var(const LongSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new LongSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~LongSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline LongSeq_var& operator = (LongSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline LongSeq_var& operator = (const LongSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new LongSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline ::CORBA::Long& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline LongSeq* operator -> () { return _pd_seq; }
  inline const LongSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator LongSeq& () const { return *_pd_seq; }
#else
  inline operator const LongSeq& () const { return *_pd_seq; }
  inline operator LongSeq& () { return *_pd_seq; }
#endif
    
  inline const LongSeq& in() const { return *_pd_seq; }
  inline LongSeq&       inout()    { return *_pd_seq; }
  inline LongSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline LongSeq* _retn() { LongSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class LongSeq_out;
  
private:
  LongSeq* _pd_seq;
};

class LongSeq_out {
public:
  inline LongSeq_out(LongSeq*& _s) : _data(_s) { _data = 0; }
  inline LongSeq_out(LongSeq_var& _s)
    : _data(_s._pd_seq) { _s = (LongSeq*) 0; }
  inline LongSeq_out(const LongSeq_out& _s) : _data(_s._data) {}
  inline LongSeq_out& operator = (const LongSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline LongSeq_out& operator = (LongSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator LongSeq*&()  { return _data; }
  inline LongSeq*& ptr()       { return _data; }
  inline LongSeq* operator->() { return _data; }

  inline ::CORBA::Long& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  LongSeq*& _data;

private:
  LongSeq_out();
  LongSeq_out& operator=(const LongSeq_var&);
};

class FloatSeq_var;

class FloatSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 >  {
public:
  typedef FloatSeq_var _var_type;
  inline FloatSeq() {}
  inline FloatSeq(const FloatSeq& _s)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > (_s) {}

  inline FloatSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > (_max) {}
  inline FloatSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Float* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > (_max, _len, _val, _rel) {}



  inline FloatSeq& operator = (const FloatSeq& _s) {
    _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > ::operator=(_s);
    return *this;
  }
};

class FloatSeq_out;

class FloatSeq_var {
public:
  inline FloatSeq_var() : _pd_seq(0) {}
  inline FloatSeq_var(FloatSeq* _s) : _pd_seq(_s) {}
  inline FloatSeq_var(const FloatSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new FloatSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~FloatSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline FloatSeq_var& operator = (FloatSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline FloatSeq_var& operator = (const FloatSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new FloatSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline ::CORBA::Float& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline FloatSeq* operator -> () { return _pd_seq; }
  inline const FloatSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator FloatSeq& () const { return *_pd_seq; }
#else
  inline operator const FloatSeq& () const { return *_pd_seq; }
  inline operator FloatSeq& () { return *_pd_seq; }
#endif
    
  inline const FloatSeq& in() const { return *_pd_seq; }
  inline FloatSeq&       inout()    { return *_pd_seq; }
  inline FloatSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline FloatSeq* _retn() { FloatSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class FloatSeq_out;
  
private:
  FloatSeq* _pd_seq;
};

class FloatSeq_out {
public:
  inline FloatSeq_out(FloatSeq*& _s) : _data(_s) { _data = 0; }
  inline FloatSeq_out(FloatSeq_var& _s)
    : _data(_s._pd_seq) { _s = (FloatSeq*) 0; }
  inline FloatSeq_out(const FloatSeq_out& _s) : _data(_s._data) {}
  inline FloatSeq_out& operator = (const FloatSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline FloatSeq_out& operator = (FloatSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator FloatSeq*&()  { return _data; }
  inline FloatSeq*& ptr()       { return _data; }
  inline FloatSeq* operator->() { return _data; }

  inline ::CORBA::Float& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  FloatSeq*& _data;

private:
  FloatSeq_out();
  FloatSeq_out& operator=(const FloatSeq_var&);
};

class DoubleSeq_var;

class DoubleSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
public:
  typedef DoubleSeq_var _var_type;
  inline DoubleSeq() {}
  inline DoubleSeq(const DoubleSeq& _s)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

  inline DoubleSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
  inline DoubleSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}



  inline DoubleSeq& operator = (const DoubleSeq& _s) {
    _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
    return *this;
  }
};

class DoubleSeq_out;

class DoubleSeq_var {
public:
  inline DoubleSeq_var() : _pd_seq(0) {}
  inline DoubleSeq_var(DoubleSeq* _s) : _pd_seq(_s) {}
  inline DoubleSeq_var(const DoubleSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new DoubleSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~DoubleSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline DoubleSeq_var& operator = (DoubleSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline DoubleSeq_var& operator = (const DoubleSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new DoubleSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline DoubleSeq* operator -> () { return _pd_seq; }
  inline const DoubleSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator DoubleSeq& () const { return *_pd_seq; }
#else
  inline operator const DoubleSeq& () const { return *_pd_seq; }
  inline operator DoubleSeq& () { return *_pd_seq; }
#endif
    
  inline const DoubleSeq& in() const { return *_pd_seq; }
  inline DoubleSeq&       inout()    { return *_pd_seq; }
  inline DoubleSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline DoubleSeq* _retn() { DoubleSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class DoubleSeq_out;
  
private:
  DoubleSeq* _pd_seq;
};

class DoubleSeq_out {
public:
  inline DoubleSeq_out(DoubleSeq*& _s) : _data(_s) { _data = 0; }
  inline DoubleSeq_out(DoubleSeq_var& _s)
    : _data(_s._pd_seq) { _s = (DoubleSeq*) 0; }
  inline DoubleSeq_out(const DoubleSeq_out& _s) : _data(_s._data) {}
  inline DoubleSeq_out& operator = (const DoubleSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline DoubleSeq_out& operator = (DoubleSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator DoubleSeq*&()  { return _data; }
  inline DoubleSeq*& ptr()       { return _data; }
  inline DoubleSeq* operator->() { return _data; }

  inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  DoubleSeq*& _data;

private:
  DoubleSeq_out();
  DoubleSeq_out& operator=(const DoubleSeq_var&);
};

class AlarmSeq_var;

class AlarmSeq : public _CORBA_Unbounded_Sequence< Alarm >  {
public:
  typedef AlarmSeq_var _var_type;
  inline AlarmSeq() {}
  inline AlarmSeq(const AlarmSeq& _s)
    : _CORBA_Unbounded_Sequence< Alarm > (_s) {}

  inline AlarmSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< Alarm > (_max) {}
  inline AlarmSeq(_CORBA_ULong _max, _CORBA_ULong _len, Alarm* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< Alarm > (_max, _len, _val, _rel) {}



  inline AlarmSeq& operator = (const AlarmSeq& _s) {
    _CORBA_Unbounded_Sequence< Alarm > ::operator=(_s);
    return *this;
  }
};

class AlarmSeq_out;

class AlarmSeq_var {
public:
  inline AlarmSeq_var() : _pd_seq(0) {}
  inline AlarmSeq_var(AlarmSeq* _s) : _pd_seq(_s) {}
  inline AlarmSeq_var(const AlarmSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new AlarmSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~AlarmSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline AlarmSeq_var& operator = (AlarmSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline AlarmSeq_var& operator = (const AlarmSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new AlarmSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline Alarm& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline AlarmSeq* operator -> () { return _pd_seq; }
  inline const AlarmSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator AlarmSeq& () const { return *_pd_seq; }
#else
  inline operator const AlarmSeq& () const { return *_pd_seq; }
  inline operator AlarmSeq& () { return *_pd_seq; }
#endif
    
  inline const AlarmSeq& in() const { return *_pd_seq; }
  inline AlarmSeq&       inout()    { return *_pd_seq; }
  inline AlarmSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline AlarmSeq* _retn() { AlarmSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class AlarmSeq_out;
  
private:
  AlarmSeq* _pd_seq;
};

class AlarmSeq_out {
public:
  inline AlarmSeq_out(AlarmSeq*& _s) : _data(_s) { _data = 0; }
  inline AlarmSeq_out(AlarmSeq_var& _s)
    : _data(_s._pd_seq) { _s = (AlarmSeq*) 0; }
  inline AlarmSeq_out(const AlarmSeq_out& _s) : _data(_s._data) {}
  inline AlarmSeq_out& operator = (const AlarmSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline AlarmSeq_out& operator = (AlarmSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator AlarmSeq*&()  { return _data; }
  inline AlarmSeq*& ptr()       { return _data; }
  inline AlarmSeq* operator->() { return _data; }

  inline Alarm& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  AlarmSeq*& _data;

private:
  AlarmSeq_out();
  AlarmSeq_out& operator=(const AlarmSeq_var&);
};

class LimitSeq_var;

class LimitSeq : public _CORBA_Unbounded_Sequence< AxisLimit >  {
public:
  typedef LimitSeq_var _var_type;
  inline LimitSeq() {}
  inline LimitSeq(const LimitSeq& _s)
    : _CORBA_Unbounded_Sequence< AxisLimit > (_s) {}

  inline LimitSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< AxisLimit > (_max) {}
  inline LimitSeq(_CORBA_ULong _max, _CORBA_ULong _len, AxisLimit* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< AxisLimit > (_max, _len, _val, _rel) {}



  inline LimitSeq& operator = (const LimitSeq& _s) {
    _CORBA_Unbounded_Sequence< AxisLimit > ::operator=(_s);
    return *this;
  }
};

class LimitSeq_out;

class LimitSeq_var {
public:
  inline LimitSeq_var() : _pd_seq(0) {}
  inline LimitSeq_var(LimitSeq* _s) : _pd_seq(_s) {}
  inline LimitSeq_var(const LimitSeq_var& _s) {
    if( _s._pd_seq )  _pd_seq = new LimitSeq(*_s._pd_seq);
    else              _pd_seq = 0;
  }
  inline ~LimitSeq_var() { if( _pd_seq )  delete _pd_seq; }
    
  inline LimitSeq_var& operator = (LimitSeq* _s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline LimitSeq_var& operator = (const LimitSeq_var& _s) {
    if( _s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new LimitSeq;
      *_pd_seq = *_s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }
  inline AxisLimit& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline LimitSeq* operator -> () { return _pd_seq; }
  inline const LimitSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator LimitSeq& () const { return *_pd_seq; }
#else
  inline operator const LimitSeq& () const { return *_pd_seq; }
  inline operator LimitSeq& () { return *_pd_seq; }
#endif
    
  inline const LimitSeq& in() const { return *_pd_seq; }
  inline LimitSeq&       inout()    { return *_pd_seq; }
  inline LimitSeq*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline LimitSeq* _retn() { LimitSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class LimitSeq_out;
  
private:
  LimitSeq* _pd_seq;
};

class LimitSeq_out {
public:
  inline LimitSeq_out(LimitSeq*& _s) : _data(_s) { _data = 0; }
  inline LimitSeq_out(LimitSeq_var& _s)
    : _data(_s._pd_seq) { _s = (LimitSeq*) 0; }
  inline LimitSeq_out(const LimitSeq_out& _s) : _data(_s._data) {}
  inline LimitSeq_out& operator = (const LimitSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline LimitSeq_out& operator = (LimitSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator LimitSeq*&()  { return _data; }
  inline LimitSeq*& ptr()       { return _data; }
  inline LimitSeq* operator->() { return _data; }

  inline AxisLimit& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  LimitSeq*& _data;

private:
  LimitSeq_out();
  LimitSeq_out& operator=(const LimitSeq_var&);
};









#undef _core_attr
#undef _dyn_attr

inline void operator >>=(AlarmType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (AlarmType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= UNKNOWN) {
    _e = (AlarmType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Common
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Common
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Common
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Common
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Common
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Common
#endif

#endif  // __Common_hh__

