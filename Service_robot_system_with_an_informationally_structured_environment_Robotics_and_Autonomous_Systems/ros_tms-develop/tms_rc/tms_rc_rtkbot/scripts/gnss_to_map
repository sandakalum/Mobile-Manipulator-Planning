#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy
import pyproj
import numpy as np

from sensor_msgs.msg import NavSatFix
from nav_msgs.msg           import Odometry
from visualization_msgs.msg import Marker


class GnssToMapClass:
  def __init__(self):

    # Params
    self.map_frame = rospy.get_param('~map_frame_name', 'map')
    self.odom_frame = rospy.get_param('~odom_frame_name', 'odom')
    self.origin_lat = np.array([rospy.get_param('~origin_lat', 0.)], dtype='float64')
    self.origin_lng = np.array([rospy.get_param('~origin_lng', 0.)], dtype='float64')
    self.angle_offset = np.array([rospy.get_param('~angle_offset', 0.)], dtype='float64')
    self.scale_offset = np.array([rospy.get_param('~scale_offset', 1.)], dtype='float64')
    self.sel_solutions = rospy.get_param('~sel_solutions', "fix")

    #self.offset_x = np.array([rospy.get_param('~offset_x', 0.)], dtype='float64')
    #self.offset_y = np.array([rospy.get_param('~offset_y', 0.)], dtype='float64')

    # self.offset_x = np.array([-1.89669847488], dtype='float64')
    # self.offset_y = np.array([2.8579647541], dtype='float64')

    in_topic_name = rospy.get_param('~in_topic_name', '/fix')
    out_topic_name = rospy.get_param('~out_topic_name', 'odometry/measured')

    # Pub, Sub
    self.gps_pub = rospy.Publisher(out_topic_name, Odometry, queue_size=100)
    rospy.Subscriber(in_topic_name, NavSatFix, self.callback_gps, queue_size=100)
    self.navsat_status = {'fix': 3, 'float': 2} # User Defined

    # Marker
    self.marker = Marker()
    self._init_marker()
    self.marker_pub = rospy.Publisher('/gps_marker', Marker, queue_size=100)

  def _init_marker(self):
    self.marker.header.frame_id = 'world_link'
    self.marker.type            = 3 #cylinder
    self.marker.action          = 0 #add
    self.marker.scale.x         = 0.2
    self.marker.scale.y         = 0.2
    self.marker.scale.z         = 1.0
    self.marker.color.a         = 1.0
    self.marker.id              = 0
    self.marker.lifetime        = rospy.Duration(0)

  def _latlng2xy(self, lng, lat):

    wgs84 = pyproj.Proj(init='EPSG:4326')  # WGS84 緯度経度 (測地系)
    rect6 = pyproj.Proj(init='EPSG:2444')  # 平面直角座標系 (座標系)

    target_lng = np.array([lng], dtype = 'float64')
    target_lat = np.array([lat], dtype = 'float64')

    origin_X, origin_Y = pyproj.transform(wgs84, rect6, self.origin_lng[0], self.origin_lat[0])  # Map原点の座標
    target_X, target_Y = pyproj.transform(wgs84, rect6, target_lng[0], target_lat[0])  # 測位している点

    rel_XY = np.array([target_X - origin_X, target_Y - origin_Y], dtype = 'float64')  # Map原点からの相対座標

    _angle_offset = np.array([np.deg2rad(self.angle_offset[0])], dtype = 'float64')
    rot = np.array([[np.cos(_angle_offset[0]), -np.sin(_angle_offset[0])],
                    [np.sin(_angle_offset[0]), np.cos(_angle_offset[0])]])
    
    ret_XY = np.dot(rot, rel_XY) * self.scale_offset[0]

    return ret_XY[0], ret_XY[1]

  def callback_gps(self, data):

    x, y = self._latlng2xy(data.longitude, data.latitude) # Converted Coordinates

    # Set Odom Topic
    odom                      = Odometry()
    odom.header.stamp         = rospy.Time.now()
    odom.header.frame_id      = self.map_frame
    odom.child_frame_id       = self.odom_frame

    # if x == 0 and y == 0:
    #   odom.pose.pose.position.x = x
    #   odom.pose.pose.position.y = y
    # else:
    #   odom.pose.pose.position.x = x - self.offset_x[0]
    #   odom.pose.pose.position.y = y - self.offset_y[0]          

    odom.pose.pose.position.z = 0.0
    odom.pose.pose.orientation.x = 0.0
    odom.pose.pose.orientation.y = 0.0
    odom.pose.pose.orientation.z = 0.0
    odom.pose.pose.orientation.w = 1.0

    rtk_mode = data.status.status

    # Set Marker Topic
    self.marker.header.stamp = rospy.Time.now()
    self.marker.pose.position    = odom.pose.pose.position
    self.marker.pose.orientation = odom.pose.pose.orientation
    self.marker.id += 1
    
    if rtk_mode == self.navsat_status.get('fix'): # Fix: Blue
      self.marker.color.r = 0.0
      self.marker.color.g = 0.0
      self.marker.color.b = 1.0
      print("GPS Status: Fix")
    elif rtk_mode == self.navsat_status.get('float'): # Float: Green
      self.marker.color.r = 0.0
      self.marker.color.g = 1.0
      self.marker.color.b = 0.0
      print("GPS Status: Float")
    else: # Else: Red
      self.marker.color.r = 1.0
      self.marker.color.g = 0.0
      self.marker.color.b = 0.0
      if rtk_mode == 1:
        print("GPS Status: Autonomous")
      else:
        print("GPS Status: Invalid")

    # Publish Topics
    self.marker_pub.publish(self.marker)
    self.gps_pub.publish(odom)
    

if __name__ == '__main__':
  rospy.init_node('gnss_to_map', anonymous=True)
  try:
    GnssToMapClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("gnss_to_map node finished.")
