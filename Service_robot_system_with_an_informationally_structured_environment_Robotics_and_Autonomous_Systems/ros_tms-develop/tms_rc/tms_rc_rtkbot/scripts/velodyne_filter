#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import sensor_msgs.point_cloud2 as pc2
from sensor_msgs.msg import PointCloud2
from std_msgs.msg import Header

ExtractRingNumberRange = []
pub = rospy.Publisher('velodyne_points_filtered', PointCloud2, queue_size=100)


def callback(msg):
    data = pc2.read_points(msg)
    data = np.array(list(data))

    # ExtractRingNumberRange[0]～ExtractRingNumberRange[1]を抽出
    points = data[np.logical_and(data[:, 4] >= ExtractRingNumberRange[0], data[:, 4] <= ExtractRingNumberRange[1])]

    header = Header()
    header.frame_id = "velodyne"
    msg2 = pc2.create_cloud(header, msg.fields, points)
    msg2.header.stamp = rospy.Time.now()
    pub.publish(msg2)
 

if __name__ == '__main__':
    try:
        rospy.init_node('velodyne_filter', anonymous=True)
        ExtractRingNumberRange = [rospy.get_param('~ring_no_min', 0), rospy.get_param('~ring_no_max', 15)]
        print(ExtractRingNumberRange)
        
        rospy.Subscriber(rospy.get_param('~velodyne_topic_name', "velodyne_points"), PointCloud2, callback)
        rospy.spin()

    except rospy.ROSInterruptException:
        pass
