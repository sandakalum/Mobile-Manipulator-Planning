#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
import numpy

from std_msgs.msg      import Int8
from geometry_msgs.msg import Twist

class CmdClass:
  def __init__(self):
    rospy.on_shutdown(self.shutdown)

    cmd_vel_topic = rospy.get_param('~cmd_vel_topic', 'cmd_vel')

    self.max_rot_vel = rospy.get_param('~max_rot_vel', 0.2)
    self.spin_K      = rospy.get_param('~spin_K', 40)

    self.cmd_pub = rospy.Publisher('serial_cmd', Int8, queue_size=100)
    rospy.Subscriber(cmd_vel_topic, Twist, self.callback_twist, queue_size=100)

  def callback_twist(self, data):
  
    if self.max_rot_vel != 0.0:
      control = data.angular.z
      control = numpy.clip(control, -self.max_rot_vel, self.max_rot_vel)
      control /= self.max_rot_vel
      control *= self.spin_K
    else: control = 0
 
    control = int(numpy.clip(control, -63, 63))
    self.cmd_pub.publish(63 + control)

  def shutdown(self):
    try:
      self.cmd_pub.publish(127)
    except: pass

if __name__ == '__main__':
  rospy.init_node('ninebot_controller', anonymous=True)
  try:
    CmdClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("ninebot_controller node finished.")
