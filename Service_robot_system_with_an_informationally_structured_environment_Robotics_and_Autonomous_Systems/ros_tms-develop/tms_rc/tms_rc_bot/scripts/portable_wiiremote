#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy

from sensor_msgs.msg   import Joy
from geometry_msgs.msg import Twist

# wiiリモコンを接続するPC側で「rosrun wiimote wiimote_node.py」を実行すると、
# wiimote_nodeが出すtopicから、このノードがrobotへの指令を生成する

class WiiRemoteClass:
  def __init__(self):
    rospy.on_shutdown(self.shutdown)

    topic_name         = rospy.get_param('~cmd_vel_topic', 'wii_cmd')
    self.max_trans_vel = rospy.get_param('~max_trans_vel',       0.3)
    self.max_rot_vel   = rospy.get_param('~max_rot_vel',         0.8)
    self.remote_play   = rospy.get_param('~wiiremote_play',     0.08)
    self.linear_active = rospy.get_param('~linear_active',      True)
    
    self.twist     = Twist()
    self.twist_pub = rospy.Publisher(topic_name, Twist, queue_size=10)

    rospy.Subscriber('/wiimote/nunchuk', Joy, self.callback, queue_size=100)

  def callback(self, data):
    
    if data.buttons[0] == 0: return #もしZボタンが押されていなかったら送信しない

    joy_x = data.axes[0]
    joy_y = data.axes[1]

    if self.linear_active == True: #並進速度も送信する場合
      if joy_y < 0.0: joy_x = -joy_x

      if abs(joy_y) < self.remote_play: joy_y = 0
      else:                             joy_y *= self.max_trans_vel
      self.twist.linear.x  = joy_y

    if abs(joy_x) < self.remote_play: joy_x = 0
    else:                             joy_x *= self.max_rot_vel
    self.twist.angular.z = joy_x

    self.twist_pub.publish(self.twist)

  def shutdown(self):
    try:
      self.twist_pub.publish(Twist())
    except: pass

if __name__ == '__main__':
  rospy.init_node('portable_wiiremote', anonymous=True)
  try:
    WiiRemoteClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("portable_wiiremote node finished.")
