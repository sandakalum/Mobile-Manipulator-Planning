#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
import math 
import threading

from std_msgs.msg      import Float64
from std_msgs.msg      import String
from geometry_msgs.msg import Twist
from nav_msgs.msg      import Odometry

class NaviClass:
  def __init__(self):
    rospy.on_shutdown(self.shutdown)

    self.time_out   = rospy.get_param('~time_out', 1.0) 
    cmd_vel_topic   = rospy.get_param('~cmd_vel_topic', 'cmd_vel')
    odom_topic_name = rospy.get_param('~odom_topic_name', 'odom')
  
    self.odom      = Odometry()
    self.pre_twist = Twist()
    self.mutex     = threading.Lock()

    self.mux_active  = 'idle'
    self.odom_update = False
    self.time_stamp  = rospy.get_rostime()

    self.sound_pub = rospy.Publisher('portable_sound', Float64, queue_size=10)
    rospy.Subscriber(cmd_vel_topic, Twist, self.callback_twist, queue_size=100)
    rospy.Subscriber(odom_topic_name, Odometry, self.callback_odom, queue_size=100)
    rospy.Subscriber('cmd_vel_mux/active', String, self.callback_active, queue_size=10)

  def callback_twist(self, data):
  
    if self.odom_update == False:
      now = rospy.get_rostime()
      if now.secs - self.time_stamp.secs > self.time_out:
        return
    else: self.time_stamp = rospy.get_rostime()

    self.mutex.acquire()

    if (self.odom.twist.twist.linear.x  * data.linear.x < -0.05) and (self.mux_active == 'Navigation stack'):
      self.sound_pub.publish(0.01)
    elif (self.pre_twist.linear.x != 0.0) and (data.linear.x == 0.0) and (math.fabs(self.odom.twist.twist.linear.x ) > 0.03):
      self.sound_pub.publish(0.01)
    self.pre_twist = data

    self.odom_update = False
    self.mutex.release()

  def callback_odom(self, data):
    self.mutex.acquire()
    self.odom = data
    self.odom_update = True
    self.mutex.release()

  def callback_active(self, data):
    self.mux_active = data.data

  def shutdown(self):
    try:
      self.twist_pub.publish(Twist())
    except: pass

if __name__ == '__main__':
  rospy.init_node('ninebot_navigator', anonymous=True)
  try:
    NaviClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("ninebot_navigator node finished.")
