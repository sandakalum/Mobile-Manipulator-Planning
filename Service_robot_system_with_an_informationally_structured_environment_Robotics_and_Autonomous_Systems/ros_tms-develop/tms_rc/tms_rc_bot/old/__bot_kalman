#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
import tf
import cv2
import threading
import numpy as np
from math import cos, sin, sqrt, pi

from nav_msgs.msg      import Odometry
from std_msgs.msg      import String
from std_msgs.msg      import Float64

PROCESS_NOISE     = 5e-2 # process noise
MEASUREMENT_NOISE = 1e-1 # measurement noise

class KalmanClass:

  def __init__(self):
    def sqr(var):
      return (var*var)

    measure_topic_name = rospy.get_param('~measure_topic_name', '/ninebot_measured_pos')

    self.odom_frame = rospy.get_param('~odom_frame_id', 'odom')
    self.base_frame = rospy.get_param('~base_frame_id', 'base_footprint')

    self.radius    = rospy.get_param('~radius', 0.123) # タイヤの半径(人が乗った場合 ： 0.123, 手で押す場合 : 0.129)
    self.tread     = rospy.get_param('~tread',  0.485) # タイヤ間距離
    self.r_pulse   = rospy.get_param('~r_pulse', 4000) # エンコーダが一周した際のエンコーダ値（パルス数×4）
    self.k_encoder = 2.0 * pi * self.radius / self.r_pulse

    self.position_x = float(rospy.get_param('~initial_pose_x', 0.0))
    self.position_y = float(rospy.get_param('~initial_pose_y', 0.0))
    self.pose_yaw   = float(rospy.get_param('~initial_pose_a', 0.0))

    self.odom_pub    = rospy.Publisher('odom', Odometry, queue_size=1000)
    self.broadcaster = tf.TransformBroadcaster()

    self.kalman = cv2.KalmanFilter(3, 2, 2)
    self.kalman.transitionMatrix = np.array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]])
    self.kalman.measurementMatrix = np.array([[1., 0., 0.], [0., 1., 0.]])
    self.kalman.processNoiseCov = sqr(PROCESS_NOISE) * np.eye(3)
    self.kalman.measurementNoiseCov = sqr(MEASUREMENT_NOISE) * np.eye(2)
    self.kalman.errorCovPost = 1. * np.ones((3, 3))
    self.kalman.statePost = np.array([[self.position_x], [self.position_y], [self.pose_yaw]])
    self.kalman_updated = False
    self.mutex = threading.Lock()
    
    rospy.Subscriber('serial_string', String, self.callback_string, queue_size=100)
    rospy.Subscriber('wheel_radius', Float64, self.callback_radius, queue_size=100)
    rospy.Subscriber('wheel_tread',  Float64, self.callback_tread,  queue_size=100)

    rospy.Subscriber(measure_topic_name, Odometry, self.callback_measure, queue_size=10)

  def callback_string(self, data):

    try:
      split_date = data.data.split(",")
      if (len(split_date) < 3): return
      delta_r = int(split_date[0])
      delta_l = int(split_date[1])
      delta_t = float(split_date[2])
      
      if delta_t <= 0: return
    except: return

    delta_r = self.k_encoder * delta_r
    delta_l = self.k_encoder * delta_l
    
    self.mutex.acquire()

    control = np.array([[delta_r], [delta_l]])
    t = self.kalman.statePost[2, 0]
    self.kalman.controlMatrix = np.array([[cos(t) / 2.0, cos(t) / 2.0], [sin(t) / 2.0, sin(t) / 2.0], [1.0 / self.tread, -1.0 / self.tread]])

    prediction = self.kalman.predict(control)

    self.position_x = prediction[0, 0]
    self.position_y = prediction[1, 0]
    self.pose_yaw   = prediction[2, 0]
    self.kalman_updated = True
    self.mutex.release()
  
    while self.pose_yaw >  pi: self.pose_yaw -= 2.0 * pi
    while self.pose_yaw < -pi: self.pose_yaw += 2.0 * pi

    quate = tf.transformations.quaternion_from_euler(0.0, 0.0, self.pose_yaw)
    odom                         = Odometry()
    odom.header.stamp            = rospy.Time.now()
    odom.header.frame_id         = self.odom_frame
    odom.pose.pose.position.x    = self.position_x
    odom.pose.pose.position.y    = self.position_y
    odom.pose.pose.orientation.x = quate[0]
    odom.pose.pose.orientation.y = quate[1]
    odom.pose.pose.orientation.z = quate[2]
    odom.pose.pose.orientation.w = quate[3]
    self.odom_pub.publish(odom)

    self.broadcaster.sendTransform( \
      (self.position_x, self.position_y, 0.0),  \
      (quate[0], quate[1], quate[2], quate[3]), \
      rospy.Time.now(), self.base_frame, self.odom_frame)

  def callback_measure(self, data):
    if self.kalman_updated == False: return
    self.mutex.acquire()
    self.kalman.correct(np.array([[data.pose.pose.position.x], [data.pose.pose.position.y]]))
    self.mutex.release()

  def callback_radius(self, data):
    self.radius = data.data
    self.k_encoder = 2.0 * pi * self.radius / self.r_pulse

  def callback_tread(self, data):
    self.tread = data.data

if __name__ == '__main__':
  rospy.init_node('bot_kalman', anonymous=True)
  try:
    KalmanClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("bot_kalman node finished.")


  # <!-- ninebot kalman -->
  # <!-- <node pkg="tms_rc_bot" type="bot_kalman" name="bot_kalman" output="screen">
  #   <param name="odom_topic_name"    value="odom"/>
  #   <param name="measure_topic_name" value="/ninebot_measured_pos"/>
  #   <param name="odom_frame_id"      value="$(arg odom)"/>
  #   <param name="base_frame_id"      value="$(arg base_footprint)"/>
  #   <param name="initial_pose_x"     value="$(arg initialpose_x)"/>
  #   <param name="initial_pose_y"     value="$(arg initialpose_y)"/>
  #   <param name="initial_pose_a"     value="$(arg initialpose_a)"/>
  # </node> -->