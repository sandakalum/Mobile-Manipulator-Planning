#!/usr/bin/env python
# -*- coding:utf-8 -*-

#--低レベルとの通信規格
#　  全て１バイト単位で通信（１バイトを一定時間受け取れなかった場合低レベル側で停止命令が出る）
#　  上位１ビットが1の時警告ブザーを鳴らし、0の時は音は停止
#　  下位7ビットが0~126の時、63を中心とし63より小さい時はCW方向、大きい時はCCW方向へ回転
#    127の時は静止（127は緊急停止として用意しているが現在のところ63と127の違いはなし）
#    0の時:中心値 - 0.2[v] 、 126の時:中心値 + 0.2[V]が回路からNinebotへ出される
#    （低レベル側では、中心値±0.2[V]までしか出ないように設定している）

import serial
import time
import rospy
import numpy
import tty
import sys
import termios
import threading

from std_msgs.msg      import String
from std_msgs.msg      import Float64
from geometry_msgs.msg import Twist

ROS_RATE     = 100
VOLTAGE_MAX  = 0.13 # Ninebotへは(cmd.angular.z = max_rot_velの時に)中心値±VOLTAGE_MAX[V]送信される (MAX:0.2)
K_SEND_VALUE = VOLTAGE_MAX / 0.2
#K_SEND_VALUE = 1.0

class SerialClass:
  def __init__(self):
    rospy.on_shutdown(self.shutdown)

    self.cmd           = Twist()
    self.ser           = serial.Serial()
    self.mutex         = threading.Lock()
    self.sound_counter = 0
    self.ser.port      = rospy.get_param('~port', '/dev/ttyACM1')
    self.ser.baudrate  = rospy.get_param('~baud_rate', 115200)
    self.max_rot_vel   = rospy.get_param('~max_rot_vel', 0.2)

    while True:
      if not rospy.is_shutdown():
        try:
          self.ser.open()
          time.sleep(7)
          break
        except:
          rospy.logerr('Error connecting to Serial : Could not open Serial')
          time.sleep(7)
          continue
      else: return 

    pub = rospy.Publisher('serial_string', String, queue_size=1000)
    rospy.Subscriber('serial_twist', Twist, self.callback_twist, queue_size=100)
    rospy.Subscriber('portable_sound', Float64, self.callback_sound, queue_size=10)
    
    sound      = False
    send_value = 127
    self.ser.write(chr(send_value))

    rate = rospy.Rate(ROS_RATE)
    while not rospy.is_shutdown():
      rate.sleep()
      
      if 0 < self.sound_counter:
        sound = True
        self.mutex.acquire()
        self.sound_counter -= 1
        self.mutex.release()
      else: sound = False

      try:
        if self.max_rot_vel != 0.0:
          ang_value = numpy.clip(self.cmd.angular.z, -self.max_rot_vel, self.max_rot_vel) #-max_rot_vel ≦ ang_value ≦ max_rot_vel
          ang_value = (ang_value + self.max_rot_vel) / (2 * self.max_rot_vel)             #           0 ≦ ang_value ≦ 1
          ang_value = int(126 * (0.5 + ((ang_value - 0.5) * K_SEND_VALUE)))               #           0 ≦ ang_value ≦ 126

          if sound == True: send_value = 0x80 | ang_value 
          else            : send_value = 0x7f & ang_value 
        else: send_value = 127
        self.ser.write(chr(send_value))
        #rospy.loginfo("nucleo_serial : send_value = %d", send_value)

        line = self.ser.readline()
        pub.publish(line)
      except: continue

  def callback_twist(self, data):
    self.cmd = data

  def callback_sound(self, data):
    self.mutex.acquire()
    self.sound_counter = int(data.data * ROS_RATE)
    self.mutex.release()

  def shutdown(self):
    try:
      self.ser.write(chr(127))
      self.ser.close()
    except: pass

if __name__ == '__main__':
  rospy.init_node('ninebot_serial', anonymous=True)
  try:
    K_SEND_VALUE = numpy.clip(K_SEND_VALUE, 0.0, 1.0) 
    SerialClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("ninebot_serial node finished.")