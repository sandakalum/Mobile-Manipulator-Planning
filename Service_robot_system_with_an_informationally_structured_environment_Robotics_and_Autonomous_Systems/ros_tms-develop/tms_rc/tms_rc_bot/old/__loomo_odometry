#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
import math 
import tf

from math import cos, sin, sqrt, pi

from nav_msgs.msg import Odometry

class OdometryClass:
  def __init__(self):

    self.odom_frame = rospy.get_param('~odom_frame_id', 'odom')
    self.base_frame = rospy.get_param('~base_frame_id', 'base_footprint')

    self.broadcaster = tf.TransformBroadcaster()

    topic_name = rospy.get_param('~odom_topic_name', 'odometry/wheel')
    rospy.Subscriber(topic_name, Odometry, self.callback_odom, queue_size=100)
    
    self.position_x = 0.0
    self.position_y = 0.0
    self.pose_yaw   = 0.0

  def callback_odom(self, data):

    self.position_x += cos(self.pose_yaw) * data.twist.twist.linear.x
    self.position_y += sin(self.pose_yaw) * data.twist.twist.linear.x

    self.pose_yaw += data.twist.twist.angular.z
    while self.pose_yaw >  pi: self.pose_yaw -= 2.0 * pi
    while self.pose_yaw < -pi: self.pose_yaw += 2.0 * pi

    quate = tf.transformations.quaternion_from_euler(0.0, 0.0, self.pose_yaw)
    self.broadcaster.sendTransform( \
    (self.position_x, self.position_y, 0.0), quate, \
    rospy.Time.now(), self.base_frame, self.odom_frame)

if __name__ == '__main__':
  rospy.init_node('loomo_odometry', anonymous=True)
  try:
    OdometryClass()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("loomo_odometry node finished.")
