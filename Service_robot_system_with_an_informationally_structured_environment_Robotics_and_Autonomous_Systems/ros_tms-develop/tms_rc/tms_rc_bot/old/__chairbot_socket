#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy
#import time
import socket
#import threading
from contextlib import closing

#from geometry_msgs.msg import Twist

class SocketClass:
  def __init__(self):
    rospy.on_shutdown(self.shutdown)

    host = '192.168.11.96'
    port = 54300
    size = 1024
    
    self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #self.sock = socket.socket(socket.AF_INET)
    #self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    try:
      self.sock.connect((host, port))
    except: return

    try:      
      self.sock.send('@CR1\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@CR2\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@SM1,1\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@SM2,1\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@PP1,1000\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@PP2,1000\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@PI1,100\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@PI2,100\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@PD1,0\n')
      response = self.sock.recv(size)
      print response
      self.sock.send('@PD2,0\n')
      response = self.sock.recv(size)
      print response
    except: return


    #self.sock.close()
    #return

    rate = rospy.Rate(100)
    while not rospy.is_shutdown():
      rate.sleep()  
      try:
        self.sock.send('@GP1\n')
        response = self.sock.recv(size)
        print response
        self.sock.send('@GP2\n')
        response = self.sock.recv(size)
        print response
        self.sock.send('@SS1,-300\n')
        response = self.sock.recv(size)
        #print response
        self.sock.send('@SS2,300\n')
        response = self.sock.recv(size)
        #print response
      except: continue

  




    # self.cmd           = Twist()
    # self.ser           = serial.Serial()
    # self.mutex         = threading.Lock()
    # self.sound_counter = 0
    # self.ser.port      = rospy.get_param('~port', '/dev/ttyACM1')
    # self.ser.baudrate  = rospy.get_param('~baud_rate', 115200)
    # self.max_rot_vel   = rospy.get_param('~max_rot_vel', 0.2)

    # while True:
    #   if not rospy.is_shutdown():
    #     try:
    #       self.ser.open()
    #       time.sleep(7)
    #       break
    #     except:
    #       rospy.logerr('Error connecting to Serial : Could not open Serial')
    #       time.sleep(7)
    #       continue
    #   else: return 

    # pub = rospy.Publisher('serial_string', String, queue_size=1000)
    # rospy.Subscriber('serial_twist', Twist, self.callback_twist, queue_size=100)

    # rate = rospy.Rate(100)
    # while not rospy.is_shutdown():
    #   rate.sleep()



  def callback_twist(self, data):
    pass

  def callback_empty(self, data):
    pass

  def shutdown(self):
    try:
      rospy.loginfo("__shut__")
      #self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      self.sock.send('@SS1,0\n@SS2,0\n')
      self.sock.close()
    except: pass

if __name__ == '__main__':
  rospy.init_node('chairbot_socket', anonymous=True)
  try:
    SocketClass()
    rospy.loginfo("chairbot_socket node finished.")
  except rospy.ROSInterruptException:
    rospy.loginfo("chairbot_socket node finished.")